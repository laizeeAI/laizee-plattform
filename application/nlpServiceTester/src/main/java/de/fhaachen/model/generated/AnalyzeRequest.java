/*
 * las-web
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0rc7
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.fhaachen.model.generated;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * AnalyzeRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-05T12:26:14.125952859+02:00[Europe/Berlin]")
public class AnalyzeRequest {
    @JsonProperty("text")
    //private AnyOfAnalyzeRequestText text = null;
    private String text = null;

    @JsonProperty("token_based")
    private Boolean tokenBased = false;

    @JsonProperty("tasks")
    private List<TaskEnum> tasks = null;

    @JsonProperty("classes")
    private List<String> classes = null;

    @JsonProperty("labels")
    private List<String> labels = null;

    @JsonProperty("multi_label")
    private Boolean multiLabel = false;

    //public AnalyzeRequest text(AnyOfAnalyzeRequestText text) {
    public AnalyzeRequest text(String text) {
        this.text = text;
        return this;
    }

    /**
     * Get text
     *
     * @return text
     **/
    @Schema(required = true, description = "")
    //public AnyOfAnalyzeRequestText getText() {
    public String getText() {
        return text;
    }

    //public void setText(AnyOfAnalyzeRequestText text) {
    public void setText(String text) {
        this.text = text;
    }

    public AnalyzeRequest tokenBased(Boolean tokenBased) {
        this.tokenBased = tokenBased;
        return this;
    }

    /**
     * Get tokenBased
     *
     * @return tokenBased
     **/
    @Schema(description = "")
    public Boolean isTokenBased() {
        return tokenBased;
    }

    public void setTokenBased(Boolean tokenBased) {
        this.tokenBased = tokenBased;
    }

    public AnalyzeRequest tasks(List<TaskEnum> tasks) {
        this.tasks = tasks;
        return this;
    }

    public AnalyzeRequest addTasksItem(TaskEnum tasksItem) {
        if (this.tasks == null) {
            this.tasks = new ArrayList<TaskEnum>();
        }
        this.tasks.add(tasksItem);
        return this;
    }

    /**
     * Get tasks
     *
     * @return tasks
     **/
    @Schema(description = "")
    public List<TaskEnum> getTasks() {
        return tasks;
    }

    public void setTasks(List<TaskEnum> tasks) {
        this.tasks = tasks;
    }

    public AnalyzeRequest classes(List<String> classes) {
        this.classes = classes;
        return this;
    }

    public AnalyzeRequest addClassesItem(String classesItem) {
        if (this.classes == null) {
            this.classes = new ArrayList<String>();
        }
        this.classes.add(classesItem);
        return this;
    }

    /**
     * Get classes
     *
     * @return classes
     **/
    @Schema(description = "")
    public List<String> getClasses() {
        return classes;
    }

    public void setClasses(List<String> classes) {
        this.classes = classes;
    }

    public AnalyzeRequest labels(List<String> labels) {
        this.labels = labels;
        return this;
    }

    public AnalyzeRequest addLabelsItem(String labelsItem) {
        if (this.labels == null) {
            this.labels = new ArrayList<String>();
        }
        this.labels.add(labelsItem);
        return this;
    }

    /**
     * Get labels
     *
     * @return labels
     **/
    @Schema(description = "")
    public List<String> getLabels() {
        return labels;
    }

    public void setLabels(List<String> labels) {
        this.labels = labels;
    }

    public AnalyzeRequest multiLabel(Boolean multiLabel) {
        this.multiLabel = multiLabel;
        return this;
    }

    /**
     * Get multiLabel
     *
     * @return multiLabel
     **/
    @Schema(description = "")
    public Boolean isMultiLabel() {
        return multiLabel;
    }

    public void setMultiLabel(Boolean multiLabel) {
        this.multiLabel = multiLabel;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AnalyzeRequest analyzeRequest = (AnalyzeRequest) o;
        return Objects.equals(this.text, analyzeRequest.text) &&
                Objects.equals(this.tokenBased, analyzeRequest.tokenBased) &&
                Objects.equals(this.tasks, analyzeRequest.tasks) &&
                Objects.equals(this.classes, analyzeRequest.classes) &&
                Objects.equals(this.labels, analyzeRequest.labels) &&
                Objects.equals(this.multiLabel, analyzeRequest.multiLabel);
    }

    @Override
    public int hashCode() {
        return Objects.hash(text, tokenBased, tasks, classes, labels, multiLabel);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AnalyzeRequest {\n");

        sb.append("    text: ").append(toIndentedString(text)).append("\n");
        sb.append("    tokenBased: ").append(toIndentedString(tokenBased)).append("\n");
        sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
        sb.append("    classes: ").append(toIndentedString(classes)).append("\n");
        sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
        sb.append("    multiLabel: ").append(toIndentedString(multiLabel)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
