/*
 * las-web
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0rc7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.fhaachen.model.generated;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import java.math.BigDecimal;
import java.util.Objects;
/**
 * RelationResponseItem
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-05T12:26:14.125952859+02:00[Europe/Berlin]")
public class RelationResponseItem {
  @JsonProperty("entity_first")
  private AnyOfRelationResponseItemEntityFirst entityFirst = null;

  @JsonProperty("entity_second")
  private AnyOfRelationResponseItemEntitySecond entitySecond = null;

  @JsonProperty("relation")
  private Label relation = null;

  @JsonProperty("certainty")
  private BigDecimal certainty = null;

  public RelationResponseItem entityFirst(AnyOfRelationResponseItemEntityFirst entityFirst) {
    this.entityFirst = entityFirst;
    return this;
  }

   /**
   * Get entityFirst
   * @return entityFirst
  **/
  @Schema(required = true, description = "")
  public AnyOfRelationResponseItemEntityFirst getEntityFirst() {
    return entityFirst;
  }

  public void setEntityFirst(AnyOfRelationResponseItemEntityFirst entityFirst) {
    this.entityFirst = entityFirst;
  }

  public RelationResponseItem entitySecond(AnyOfRelationResponseItemEntitySecond entitySecond) {
    this.entitySecond = entitySecond;
    return this;
  }

   /**
   * Get entitySecond
   * @return entitySecond
  **/
  @Schema(required = true, description = "")
  public AnyOfRelationResponseItemEntitySecond getEntitySecond() {
    return entitySecond;
  }

  public void setEntitySecond(AnyOfRelationResponseItemEntitySecond entitySecond) {
    this.entitySecond = entitySecond;
  }

  public RelationResponseItem relation(Label relation) {
    this.relation = relation;
    return this;
  }

   /**
   * Get relation
   * @return relation
  **/
  @Schema(required = true, description = "")
  public Label getRelation() {
    return relation;
  }

  public void setRelation(Label relation) {
    this.relation = relation;
  }

  public RelationResponseItem certainty(BigDecimal certainty) {
    this.certainty = certainty;
    return this;
  }

   /**
   * Get certainty
   * @return certainty
  **/
  @Schema(required = true, description = "")
  public BigDecimal getCertainty() {
    return certainty;
  }

  public void setCertainty(BigDecimal certainty) {
    this.certainty = certainty;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelationResponseItem relationResponseItem = (RelationResponseItem) o;
    return Objects.equals(this.entityFirst, relationResponseItem.entityFirst) &&
        Objects.equals(this.entitySecond, relationResponseItem.entitySecond) &&
        Objects.equals(this.relation, relationResponseItem.relation) &&
        Objects.equals(this.certainty, relationResponseItem.certainty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityFirst, entitySecond, relation, certainty);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelationResponseItem {\n");
    
    sb.append("    entityFirst: ").append(toIndentedString(entityFirst)).append("\n");
    sb.append("    entitySecond: ").append(toIndentedString(entitySecond)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("    certainty: ").append(toIndentedString(certainty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
