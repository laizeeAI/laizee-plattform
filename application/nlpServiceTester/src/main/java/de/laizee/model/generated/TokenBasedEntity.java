/*
 * las-web
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0rc7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.laizee.model.generated;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import java.math.BigDecimal;
import java.util.Objects;
/**
 * Pydantic model for a token-based index of an object.  start_token and end_token are positive integers where start_token &lt;&#x3D; end_token.
 */
@Schema(description = "Pydantic model for a token-based index of an object.  start_token and end_token are positive integers where start_token <= end_token.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-05T12:26:14.125952859+02:00[Europe/Berlin]")
public class TokenBasedEntity implements AnyOfAnalyzeResponseEntitiesItems, AnyOfRelationResponseItemEntityFirst, AnyOfRelationResponseItemEntitySecond {

  @JsonProperty("score")
  private BigDecimal score = null;

  @JsonProperty("text")
  private String text = null;

  @JsonProperty("label")
  private String label = null;

  @JsonProperty("start_token")
  private Integer startToken = null;

  @JsonProperty("end_token")
  private Integer endToken = null;

  public TokenBasedEntity(){

  }

  public TokenBasedEntity score(BigDecimal score) {
    this.score = score;
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @Schema(description = "")
  public BigDecimal getScore() {
    return score;
  }

  public void setScore(BigDecimal score) {
    this.score = score;
  }

  public TokenBasedEntity text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @Schema(required = true, description = "")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public TokenBasedEntity label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @Schema(required = true, description = "")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public TokenBasedEntity startToken(Integer startToken) {
    this.startToken = startToken;
    return this;
  }

   /**
   * Get startToken
   * @return startToken
  **/
  @Schema(required = true, description = "")
  public Integer getStartToken() {
    return startToken;
  }

  public void setStartToken(Integer startToken) {
    this.startToken = startToken;
  }

  public TokenBasedEntity endToken(Integer endToken) {
    this.endToken = endToken;
    return this;
  }

   /**
   * Get endToken
   * @return endToken
  **/
  @Schema(required = true, description = "")
  public Integer getEndToken() {
    return endToken;
  }

  public void setEndToken(Integer endToken) {
    this.endToken = endToken;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenBasedEntity tokenBasedEntity = (TokenBasedEntity) o;
    return Objects.equals(this.score, tokenBasedEntity.score) &&
        Objects.equals(this.text, tokenBasedEntity.text) &&
        Objects.equals(this.label, tokenBasedEntity.label) &&
        Objects.equals(this.startToken, tokenBasedEntity.startToken) &&
        Objects.equals(this.endToken, tokenBasedEntity.endToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(score, text, label, startToken, endToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenBasedEntity {\n");
    
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    startToken: ").append(toIndentedString(startToken)).append("\n");
    sb.append("    endToken: ").append(toIndentedString(endToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
