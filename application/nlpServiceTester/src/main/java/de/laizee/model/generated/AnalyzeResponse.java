/*
 * las-web
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0rc7
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.laizee.model.generated;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Pydantic model for a text.  A text is a string.
 */
@Schema(description = "Pydantic model for a text.  A text is a string.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-08-05T12:26:14.125952859+02:00[Europe/Berlin]")
public class AnalyzeResponse {
    @JsonProperty("text")
    private String text = null;

    @JsonProperty("tokens")
    private List<String> tokens = null;

    @JsonProperty("entities")
    private List<AnyOfAnalyzeResponseEntitiesItems> entities = null;

    @JsonProperty("categories")
    private List<Category> categories = null;

    //@JsonProperty("sentiment")
    //@JsonInclude(JsonInclude.Include.NON_NULL)
    //@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    //private AllOfAnalyzeResponseSentiment sentiment = null;

    @JsonProperty("keywords")
    private List<AnyOfAnalyzeResponseKeywordsItems> keywords = null;

    @JsonProperty("relations")
    private List<RelationResponseItem> relations = null;

    public AnalyzeResponse() {

    }

    public AnalyzeResponse text(String text) {
        this.text = text;
        return this;
    }

    /**
     * Get text
     *
     * @return text
     **/
    @Schema(required = true, description = "")
    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public AnalyzeResponse tokens(List<String> tokens) {
        this.tokens = tokens;
        return this;
    }

    public AnalyzeResponse addTokensItem(String tokensItem) {
        if (this.tokens == null) {
            this.tokens = new ArrayList<String>();
        }
        this.tokens.add(tokensItem);
        return this;
    }

    /**
     * Get tokens
     *
     * @return tokens
     **/
    @Schema(description = "")
    public List<String> getTokens() {
        return tokens;
    }

    public void setTokens(List<String> tokens) {
        this.tokens = tokens;
    }

    public AnalyzeResponse entities(List<AnyOfAnalyzeResponseEntitiesItems> entities) {
        this.entities = entities;
        return this;
    }

    public AnalyzeResponse addEntitiesItem(AnyOfAnalyzeResponseEntitiesItems entitiesItem) {
        if (this.entities == null) {
            this.entities = new ArrayList<AnyOfAnalyzeResponseEntitiesItems>();
        }
        this.entities.add(entitiesItem);
        return this;
    }

    /**
     * Get entities
     *
     * @return entities
     **/
    @Schema(description = "")
    public List<AnyOfAnalyzeResponseEntitiesItems> getEntities() {
        return entities;
    }

    public void setEntities(List<AnyOfAnalyzeResponseEntitiesItems> entities) {
        this.entities = entities;
    }

    public AnalyzeResponse categories(List<Category> categories) {
        this.categories = categories;
        return this;
    }

    public AnalyzeResponse addCategoriesItem(Category categoriesItem) {
        if (this.categories == null) {
            this.categories = new ArrayList<Category>();
        }
        this.categories.add(categoriesItem);
        return this;
    }

    /**
     * Get categories
     *
     * @return categories
     **/
    @Schema(description = "")
    public List<Category> getCategories() {
        return categories;
    }

    public void setCategories(List<Category> categories) {
        this.categories = categories;
    }
/*
    public AnalyzeResponse sentiment(AllOfAnalyzeResponseSentiment sentiment) {
        this.sentiment = sentiment;
        return this;
    }


 */

    /**
     * Get sentiment
     *
     * @return sentiment
     **/
    //   @Schema(description = "")
    //   public AllOfAnalyzeResponseSentiment getSentiment() {
    //      return sentiment;
    //   }

  /*  public void setSentiment(AllOfAnalyzeResponseSentiment sentiment) {
        this.sentiment = sentiment;
    }


   */
    public AnalyzeResponse keywords(List<AnyOfAnalyzeResponseKeywordsItems> keywords) {
        this.keywords = keywords;
        return this;
    }

    public AnalyzeResponse addKeywordsItem(AnyOfAnalyzeResponseKeywordsItems keywordsItem) {
        if (this.keywords == null) {
            this.keywords = new ArrayList<AnyOfAnalyzeResponseKeywordsItems>();
        }
        this.keywords.add(keywordsItem);
        return this;
    }

    /**
     * Get keywords
     *
     * @return keywords
     **/
    @Schema(description = "")
    public List<AnyOfAnalyzeResponseKeywordsItems> getKeywords() {
        return keywords;
    }

    public void setKeywords(List<AnyOfAnalyzeResponseKeywordsItems> keywords) {
        this.keywords = keywords;
    }

    public AnalyzeResponse relations(List<RelationResponseItem> relations) {
        this.relations = relations;
        return this;
    }

    public AnalyzeResponse addRelationsItem(RelationResponseItem relationsItem) {
        if (this.relations == null) {
            this.relations = new ArrayList<RelationResponseItem>();
        }
        this.relations.add(relationsItem);
        return this;
    }

    /**
     * Get relations
     *
     * @return relations
     **/
    @Schema(description = "")
    public List<RelationResponseItem> getRelations() {
        return relations;
    }

    public void setRelations(List<RelationResponseItem> relations) {
        this.relations = relations;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AnalyzeResponse analyzeResponse = (AnalyzeResponse) o;
        return Objects.equals(this.text, analyzeResponse.text) &&
                Objects.equals(this.tokens, analyzeResponse.tokens) &&
                Objects.equals(this.entities, analyzeResponse.entities) &&
                Objects.equals(this.categories, analyzeResponse.categories) &&
                //Objects.equals(this.sentiment, analyzeResponse.sentiment) &&
                Objects.equals(this.keywords, analyzeResponse.keywords) &&
                Objects.equals(this.relations, analyzeResponse.relations);
    }

    @Override
    public int hashCode() {
        return Objects.hash(text, tokens, entities, categories,
                // sentiment,
                keywords, relations);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AnalyzeResponse {\n");

        sb.append("    text: ").append(toIndentedString(text)).append("\n");
        sb.append("    tokens: ").append(toIndentedString(tokens)).append("\n");
        sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
        sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
        //sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
        sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
        sb.append("    relations: ").append(toIndentedString(relations)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
